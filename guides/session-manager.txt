# Complete Session Manager & Backup Account Setup

## How Session Manager Works

### **The Challenge:**
Google Colab sessions have a **12-hour maximum runtime** and **90-minute idle timeout**. Without management, your VPS would go offline every 12 hours.

### **The Solution:**
A sophisticated session rotation system that:
1. **Monitors session health** across multiple accounts
2. **Predicts session expiry** before it happens
3. **Automatically starts backup sessions** 
4. **Seamlessly transfers workload** between accounts
5. **Maintains 24/7 uptime** through rotation

## Architecture Overview

```
Account 1 (Primary)     Account 2 (Backup)     Account 3 (Emergency)
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│ Active Session  │────▶│ Standby Session │────▶│ Cold Backup     │
│ 8h remaining    │     │ Fresh start     │     │ Ready to start  │
│ Main workload   │     │ Sync in progress│     │ Emergency only  │
└─────────────────┘     └─────────────────┘     └─────────────────┘
```

### **Session Lifecycle:**
```
Session States:
┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Fresh     │───▶│   Active    │───▶│  Warning    │───▶│  Handover   │
│ 12h left    │    │ 6-11h left  │    │ 1-5h left   │    │ <1h left    │
│ Just started│    │ Processing  │    │ Prepare     │    │ Transfer    │
└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘
```

## Setting Up Multiple Accounts

### **Step 1: Create Backup Google Accounts**

**Account Strategy:**
```python
accounts = {
    "primary": {
        "email": "yourname@gmail.com",
        "role": "main_worker",
        "priority": 1
    },
    "backup1": {
        "email": "yourname.backup1@gmail.com", 
        "role": "hot_standby",
        "priority": 2
    },
    "backup2": {
        "email": "yourname.backup2@gmail.com",
        "role": "cold_backup", 
        "priority": 3
    }
}
```

**Account Creation Tips:**
1. **Use similar usernames** (easier to manage)
2. **Same phone number** (for verification)
3. **Same recovery email** (your main email)
4. **Enable 2FA** on all accounts
5. **Share Google Drive folders** between accounts

### **Step 2: Setup Google Drive Sharing**

**Create shared folders:**
```
Google Drive Structure:
MyDrive/
├── VPS_Shared/          ← Share this folder between all accounts
│   ├── state/           ← Session state files
│   ├── scripts/         ← Latest code versions
│   ├── data/            ← Persistent data
│   ├── logs/            ← System logs
│   └── config/          ← Configuration files
```

**Share setup:**
1. In primary account, create `VPS_Shared` folder
2. Right-click → Share → Add backup account emails
3. Give "Editor" permissions
4. Repeat for all backup accounts

## Session Manager Implementation

### **Master Session Manager (Run in Primary Account)**

```python
# session_manager.py - Run in Primary Colab
import time
import json
import requests
import threading
from datetime import datetime, timedelta
from google.colab import drive

class SessionManager:
    def __init__(self):
        # Mount Google Drive
        drive.mount('/content/drive')
        
        self.session_start = datetime.now()
        self.max_session_hours = 12
        self.warning_threshold = 1  # Hours before expiry to start handover
        self.backup_accounts = [
            {"email": "backup1@gmail.com", "status": "standby", "colab_url": None},
            {"email": "backup2@gmail.com", "status": "cold", "colab_url": None}
        ]
        
        self.coordinator_url = "https://your-coordinator.onrender.com"
        self.worker_id = f"primary-{int(time.time())}"
        self.state_file = "/content/drive/MyDrive/VPS_Shared/state/session_state.json"
        
        # Register as primary worker
        self.register_with_coordinator()
        
    def start_session_monitoring(self):
        """Start the main monitoring loop"""
        print("🚀 Starting session monitoring...")
        
        # Start monitoring in background thread
        monitor_thread = threading.Thread(target=self._monitoring_loop)
        monitor_thread.daemon = True
        monitor_thread.start()
        
        # Start heartbeat thread
        heartbeat_thread = threading.Thread(target=self._heartbeat_loop)
        heartbeat_thread.daemon = True
        heartbeat_thread.start()
        
        print("✅ Session monitoring active")
        
    def _monitoring_loop(self):
        """Main monitoring loop"""
        while True:
            try:
                current_time = datetime.now()
                session_age = current_time - self.session_start
                remaining_hours = self.max_session_hours - (session_age.seconds / 3600)
                
                print(f"📊 Session status: {session_age.seconds//3600}h {(session_age.seconds%3600)//60}m elapsed, {remaining_hours:.1f}h remaining")
                
                # Save current state
                self.save_session_state()
                
                # Check if handover needed
                if remaining_hours <= self.warning_threshold:
                    print("⚠️ Session expiring soon - initiating handover...")
                    self.initiate_handover()
                    break
                
                # Check backup account status
                self.check_backup_accounts()
                
                time.sleep(300)  # Check every 5 minutes
                
            except Exception as e:
                print(f"Monitoring error: {e}")
                time.sleep(60)
    
    def _heartbeat_loop(self):
        """Send heartbeat to coordinator"""
        while True:
            try:
                heartbeat_data = {
                    "worker_id": self.worker_id,
                    "status": "active",
                    "session_remaining": self.get_remaining_time(),
                    "timestamp": datetime.now().isoformat()
                }
                
                response = requests.post(
                    f"{self.coordinator_url}/api/worker/heartbeat",
                    json=heartbeat_data,
                    timeout=10
                )
                
                if response.status_code == 200:
                    print(f"💓 Heartbeat sent - {datetime.now().strftime('%H:%M:%S')}")
                else:
                    print(f"⚠️ Heartbeat failed: {response.status_code}")
                
            except Exception as e:
                print(f"Heartbeat error: {e}")
            
            time.sleep(60)  # Heartbeat every minute
    
    def save_session_state(self):
        """Save current session state to shared drive"""
        state = {
            "primary_worker_id": self.worker_id,
            "session_start": self.session_start.isoformat(),
            "last_update": datetime.now().isoformat(),
            "status": "active",
            "remaining_hours": self.get_remaining_time(),
            "current_tasks": self.get_current_tasks(),
            "system_state": self.get_system_state()
        }
        
        try:
            with open(self.state_file, 'w') as f:
                json.dump(state, f, indent=2)
            print(f"💾 State saved at {datetime.now().strftime('%H:%M:%S')}")
        except Exception as e:
            print(f"State save error: {e}")
    
    def get_remaining_time(self):
        """Calculate remaining session time in hours"""
        session_age = datetime.now() - self.session_start
        return max(0, self.max_session_hours - (session_age.seconds / 3600))
    
    def initiate_handover(self):
        """Start handover process to backup account"""
        print("🔄 STARTING HANDOVER PROCESS")
        
        # Step 1: Save final state
        print("1/5 Saving final state...")
        self.save_session_state()
        
        # Step 2: Notify coordinator about handover
        print("2/5 Notifying coordinator...")
        self.notify_coordinator_handover()
        
        # Step 3: Signal backup accounts to start
        print("3/5 Signaling backup accounts...")
        self.signal_backup_start()
        
        # Step 4: Wait for backup confirmation
        print("4/5 Waiting for backup confirmation...")
        if self.wait_for_backup_ready():
            print("✅ Backup confirmed ready")
        else:
            print("⚠️ Backup confirmation timeout")
        
        # Step 5: Transfer primary role
        print("5/5 Transferring primary role...")
        self.transfer_primary_role()
        
        print("🎉 HANDOVER COMPLETE - Session ending gracefully")
    
    def signal_backup_start(self):
        """Signal backup accounts to start new sessions"""
        signal_data = {
            "action": "start_session",
            "primary_ending": True,
            "timestamp": datetime.now().isoformat(),
            "state_file": self.state_file
        }
        
        # Save signal file for backup accounts to detect
        signal_file = "/content/drive/MyDrive/VPS_Shared/state/handover_signal.json"
        with open(signal_file, 'w') as f:
            json.dump(signal_data, f, indent=2)
        
        print("📢 Handover signal sent to backup accounts")

# Usage in Primary Account
if __name__ == "__main__":
    manager = SessionManager()
    manager.start_session_monitoring()
    
    # Keep the session alive
    try:
        while True:
            time.sleep(300)  # Check every 5 minutes
            print(f"🟢 Primary session active - {datetime.now()}")
    except KeyboardInterrupt:
        print("Session monitoring stopped")
```

### **Backup Account Monitor (Run in Each Backup Account)**

```python
# backup_monitor.py - Run in each backup Colab account
import time
import json
import requests
import threading
from datetime import datetime
from google.colab import drive
import subprocess

class BackupMonitor:
    def __init__(self, account_priority=2):
        # Mount shared Google Drive
        drive.mount('/content/drive')
        
        self.account_priority = account_priority
        self.signal_file = "/content/drive/MyDrive/VPS_Shared/state/handover_signal.json"
        self.state_file = "/content/drive/MyDrive/VPS_Shared/state/session_state.json"
        self.coordinator_url = "https://your-coordinator.onrender.com"
        self.is_primary = False
        
        print(f"🔄 Backup monitor started (Priority: {account_priority})")
        
    def start_monitoring(self):
        """Monitor for handover signals"""
        print("👀 Watching for handover signals...")
        
        while True:
            try:
                if self.check_handover_signal():
                    print("🚨 HANDOVER SIGNAL DETECTED!")
                    self.become_primary()
                    break
                
                # Also check if primary is still alive
                if not self.is_primary_alive():
                    print("💀 Primary appears dead - emergency takeover")
                    self.emergency_takeover()
                    break
                
                time.sleep(30)  # Check every 30 seconds
                
            except Exception as e:
                print(f"Monitoring error: {e}")
                time.sleep(60)
    
    def check_handover_signal(self):
        """Check if handover signal exists"""
        try:
            with open(self.signal_file, 'r') as f:
                signal = json.load(f)
            
            # Check if this signal is recent (within last 10 minutes)
            signal_time = datetime.fromisoformat(signal['timestamp'])
            age = (datetime.now() - signal_time).seconds
            
            return age < 600 and signal.get('action') == 'start_session'
            
        except (FileNotFoundError, json.JSONDecodeError, KeyError):
            return False
    
    def is_primary_alive(self):
        """Check if primary session is still alive"""
        try:
            with open(self.state_file, 'r') as f:
                state = json.load(f)
            
            last_update = datetime.fromisoformat(state['last_update'])
            age = (datetime.now() - last_update).seconds
            
            # Consider primary dead if no update in 10 minutes
            return age < 600
            
        except (FileNotFoundError, json.JSONDecodeError, KeyError):
            return False
    
    def become_primary(self):
        """Take over as primary worker"""
        print("🚀 BECOMING PRIMARY WORKER")
        
        # Step 1: Load previous state
        print("1/4 Loading previous state...")
        previous_state = self.load_previous_state()
        
        # Step 2: Install/setup environment
        print("2/4 Setting up environment...")
        self.setup_environment()
        
        # Step 3: Start services
        print("3/4 Starting services...")
        self.start_services()
        
        # Step 4: Register with coordinator
        print("4/4 Registering with coordinator...")
        self.register_as_primary()
        
        # Clear handover signal
        try:
            import os
            os.remove(self.signal_file)
        except:
            pass
        
        self.is_primary = True
        print("✅ PRIMARY TAKEOVER COMPLETE!")
        
        # Now run as primary
        self.run_as_primary()
    
    def setup_environment(self):
        """Install packages and setup environment"""
        print("📦 Installing packages...")
        
        # Install required packages
        subprocess.run(['pip', 'install', 'flask', 'pyngrok', 'requests'], check=True)
        
        # Load shared scripts
        script_source = "/content/drive/MyDrive/VPS_Shared/scripts/colab_server.py"
        if os.path.exists(script_source):
            with open(script_source, 'r') as f:
                server_code = f.read()
            
            with open('server.py', 'w') as f:
                f.write(server_code)
        
        print("✅ Environment ready")
    
    def start_services(self):
        """Start the main services"""
        print("🌐 Starting server services...")
        
        # Start the main server (this would include your Flask app, ngrok, etc.)
        # Import and start your main server code here
        exec(open('server.py').read(), globals())
        
        print("✅ Services started")
    
    def register_as_primary(self):
        """Register this session as the new primary"""
        new_worker_id = f"backup-primary-{int(time.time())}"
        
        registration_data = {
            "worker_id": new_worker_id,
            "worker_url": "will_be_updated_with_ngrok",
            "capabilities": {
                "cpu_cores": 4,
                "ram_gb": 12,
                "gpu_available": True,
                "worker_type": "colab_primary"
            },
            "takeover": True,
            "previous_session": self.get_previous_session_id()
        }
        
        try:
            response = requests.post(
                f"{self.coordinator_url}/api/worker/register",
                json=registration_data,
                timeout=10
            )
            print(f"✅ Registered as primary: {response.json()}")
        except Exception as e:
            print(f"Registration error: {e}")
    
    def run_as_primary(self):
        """Run the main session management as primary"""
        from session_manager import SessionManager
        
        # Start fresh session manager
        manager = SessionManager()
        manager.start_session_monitoring()
        
        # Keep running as primary
        while True:
            time.sleep(300)
            print(f"🟢 Backup-turned-primary active - {datetime.now()}")

# Usage in Backup Accounts
if __name__ == "__main__":
    # Set priority: 2 for first backup, 3 for second backup, etc.
    monitor = BackupMonitor(account_priority=2)
    monitor.start_monitoring()
```

## Automatic Deployment Script

### **One-Click Setup for Each Account**

```python
# deploy_to_account.py - Run this in each new account
def setup_new_backup_account():
    """One-click setup for backup accounts"""
    
    print("🚀 Setting up backup account...")
    
    # 1. Mount Google Drive
    from google.colab import drive
    drive.mount('/content/drive')
    
    # 2. Install requirements
    !pip install flask pyngrok requests psutil
    
    # 3. Download latest scripts from GitHub
    !git clone https://github.com/yourusername/colab-vps.git
    %cd colab-vps
    
    # 4. Copy scripts to Drive for sharing
    !cp -r scripts/* /content/drive/MyDrive/VPS_Shared/scripts/
    
    # 5. Start backup monitor
    %run scripts/backup_monitor.py
    
    print("✅ Backup account ready!")

# Run this in each backup account
setup_new_backup_account()
```

## Manual Backup Account Management

### **For Non-Technical Handover**

Create simple notebooks for each backup account:

**Backup Account 1 Notebook:**
```python
# Simple backup account notebook
print("🔄 Backup Account 1 - Waiting for signal...")

# Mount drive
from google.colab import drive
drive.mount('/content/drive')

# Check for handover signal every minute
import time
import json
import os

signal_file = "/content/drive/MyDrive/VPS_Shared/state/handover_signal.json"

while True:
    if os.path.exists(signal_file):
        print("🚨 HANDOVER DETECTED - BECOMING PRIMARY!")
        
        # Load and run main server
        %run /content/drive/MyDrive/VPS_Shared/scripts/main_server.py
        break
    
    print(f"⏳ Waiting... {time.strftime('%H:%M:%S')}")
    time.sleep(60)
```

## Best Practices for Effective Switching

### **1. Preparation Checklist**

```python
backup_checklist = {
    "accounts": {
        "create": "3+ Google accounts with similar names",
        "verify": "Phone verification on all accounts",
        "share": "Share Google Drive VPS_Shared folder"
    },
    "notebooks": {
        "primary": "Main session manager notebook",
        "backup1": "Backup monitor notebook (priority 2)",
        "backup2": "Emergency backup notebook (priority 3)"
    },
    "testing": {
        "handover": "Test manual handover process",
        "timing": "Verify signal detection works",
        "recovery": "Test state restoration"
    }
}
```

### **2. Monitoring Setup**

```python
# Add this to your coordinator to track sessions
@app.route('/api/sessions/status')
def session_status():
    return jsonify({
        "primary_session": get_primary_session_info(),
        "backup_sessions": get_backup_sessions(),
        "next_handover": calculate_next_handover(),
        "system_health": "healthy"
    })
```

### **3. Emergency Procedures**

**If Primary Dies Unexpectedly:**
1. **Manual activation**: Run backup notebook manually
2. **Emergency signal**: Create handover signal file manually
3. **State recovery**: Load last saved state from Drive
4. **Coordinator update**: Register new primary worker

**If All Sessions Die:**
1. **Cold start**: Start any backup account manually
2. **State check**: Load latest state from GitHub/Drive
3. **Service restart**: Reinitialize all services
4. **Client notification**: Update dashboard with status

## Testing Your Setup

### **Handover Test Script**

```python
def test_handover():
    """Test the handover process"""
    
    print("🧪 Testing handover process...")
    
    # 1. Force create handover signal
    signal_data = {
        "action": "start_session",
        "primary_ending": True,
        "timestamp": datetime.now().isoformat(),
        "test": True
    }
    
    with open("/content/drive/MyDrive/VPS_Shared/state/handover_signal.json", 'w') as f:
        json.dump(signal_data, f)
    
    print("✅ Test signal created")
    print("🔍 Check backup accounts - they should detect this signal")
    print("⏱️ Backup should become primary within 2 minutes")

# Run this to test
test_handover()
```

## Summary: Effective Session Management

### **Key Success Factors:**
1. **Multiple accounts ready** (3+ accounts minimum)
2. **Shared Google Drive** for state synchronization
3. **Automated monitoring** running in all accounts
4. **Regular testing** of handover process
5. **Clear priority order** for backup activation

### **Timeline for Smooth Handover:**
```
T-60 min: Warning threshold reached
T-30 min: Backup accounts receive advance notice
T-10 min: Backup sessions start warming up
T-5 min:  State synchronization begins
T-2 min:  Handover signal sent
T-0 min:  Primary session ends
T+1 min:  Backup detects signal and takes over
T+3 min:  New primary fully operational
```

**Result: Maximum 3-4 minute downtime during planned handovers, near-zero downtime for your users!**
